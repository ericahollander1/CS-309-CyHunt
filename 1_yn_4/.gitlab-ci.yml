# 
stages:
  - maventest
  - mavenbuild
  - androidbuild
  - androidtest
  - mavenDeploy

maven-build:   #this is a JOB
  stage: mavenbuild
  tags:
    - springboot  # this is LINK to the shell runner on the remote-server 
  script:
    - cd Backend/spring-boot
    - mvn package -e

maven-test:   #this is a JOB
  stage: maventest
  tags:
    - springboot  # this is LINK to the shell runner on the remote-server 
  script:
    - cd Backend/spring-boot
    - mvn test
    - mvn package -B
  artifacts: 
    paths: 
      - Backend/spring-boot/target/*.jar

android-build:    #this is a JOB
  image: javiersantos/android-ci:latest       # this is a directive to DOCKER
  stage: androidbuild
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/CyHunt_v2/gradlew
  tags:
    - android_tag         #this is LINK to the docker runner on the remote-server
  script:
    - cd Frontend/CyHunt_v2
    - ./gradlew build
  artifacts:
    paths:
      - Frontend/CyHunt_v2/app/build/outputs/

android-test:   #this is a JOB
  image: javiersantos/android-ci:latest
  stage: androidtest
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/CyHunt_v2/gradlew
  tags:
    - android_tag
  script:
    - cd Frontend/CyHunt_v2
    - ./gradlew test

# Below job builds, deploys, executes jar as service.
autoDeploy:
  stage: mavenDeploy  #do make a stage with same name!
  tags:
    - springboot
  script:
    - cd Backend/spring-boot
    - mvn package
    - sudo mv target/*.jar /target/web-demo.jar
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo
